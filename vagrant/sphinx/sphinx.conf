source base
{
    type                = mysql
    sql_host            = 192.168.83.140
    sql_db              = mall
    sql_user            = root
    sql_pass            =
}

index country
{
    path                = /var/lib/sphinxsearch/data/country
    source              = select_country
    blend_chars         =-
    morphology          = stem_enru
    index_exact_words	= 1
    html_strip          = 1
    #    charset_table      = U+401->U+435, U+451->U+435 # заставляет не делать различия между «Е» и «Ё»zz
    min_prefix_len      = 3 #
    #    min_word_len        = 4
    #    charset_table      = U+401->U+435, U+451->U+435 # заставляет не делать различия между «Е» и «Ё»
}

source country : base
{
    sql_field_string = title
}

source select_country : country
{
    sql_query_range = select min(id), max(id) from country

    sql_query_pre = SET character_set_results = 'utf8', character_set_client = 'utf8', character_set_connection = 'utf8', character_set_database = 'utf8', character_set_server = 'utf8'

    sql_query = \
            SELECT id, title FROM country \
            WHERE id between $start AND $end

    sql_range_step = 10000
}

index region
{
    path                = /var/lib/sphinxsearch/data/region
    source              = select_region
    blend_chars         =-
    morphology          = stem_enru
    index_exact_words	= 1
    html_strip          = 1
    #    charset_table      = U+401->U+435, U+451->U+435 # заставляет не делать различия между «Е» и «Ё»zz
    min_prefix_len      = 3 #
    #    min_word_len        = 4
    #    charset_table      = U+401->U+435, U+451->U+435 # заставляет не делать различия между «Е» и «Ё»
}

source region : base
{
    sql_field_string = title
    sql_attr_uint = country_id
}

source select_region : region
{
    sql_query_range = select min(id), max(id) from region

    sql_query_pre = SET character_set_results = 'utf8', character_set_client = 'utf8', character_set_connection = 'utf8', character_set_database = 'utf8', character_set_server = 'utf8'

    sql_query = \
            SELECT id, title, country_id FROM region \
            WHERE id between $start AND $end

    sql_range_step = 10000
}

index district
{
    path                = /var/lib/sphinxsearch/data/district
    source              = select_district
    blend_chars         =-
    morphology          = stem_enru
    index_exact_words	= 1
    html_strip          = 1
    #    charset_table      = U+401->U+435, U+451->U+435 # заставляет не делать различия между «Е» и «Ё»zz
    min_prefix_len      = 3 #
    #    min_word_len        = 4
    #    charset_table      = U+401->U+435, U+451->U+435 # заставляет не делать различия между «Е» и «Ё»
}

source district : base
{
    sql_field_string = title
    sql_attr_uint = region_id
}

source select_district : district
{
    sql_query_range = select min(id), max(id) from district

    sql_query_pre = SET character_set_results = 'utf8', character_set_client = 'utf8', character_set_connection = 'utf8', character_set_database = 'utf8', character_set_server = 'utf8'

    sql_query = \
            SELECT id, title, region_id FROM district \
            WHERE id between $start AND $end

    sql_range_step = 10000
}

index metro
{
    path                = /var/lib/sphinxsearch/data/metro
    source              = select_metro
    blend_chars         =-
    morphology          = stem_enru
    index_exact_words	= 1
    html_strip          = 1
    #    charset_table      = U+401->U+435, U+451->U+435 # заставляет не делать различия между «Е» и «Ё»zz
    min_prefix_len      = 3 #
    #    min_word_len        = 4
    #    charset_table      = U+401->U+435, U+451->U+435 # заставляет не делать различия между «Е» и «Ё»
}

source metro : base
{
    sql_field_string = title
    sql_field_string = coordinate_x
    sql_field_string = coordinate_y
    sql_attr_uint = country_id
    sql_attr_uint = region_id
    sql_attr_uint = city_id
    sql_attr_uint = sort
}

source select_metro : metro
{
    sql_query_range = select min(id), max(id) from metro

    sql_query_pre = SET character_set_results = 'utf8', character_set_client = 'utf8', character_set_connection = 'utf8', character_set_database = 'utf8', character_set_server = 'utf8'

    sql_query = \
            SELECT id, title, country_id, region_id, city_id, coordinate_x, coordinate_y, sort FROM metro \
            WHERE id between $start AND $end

    sql_range_step = 10000
}

index city
{
    path                = /var/lib/sphinxsearch/data/city
    source              = select_city
    blend_chars         =-
    morphology          = stem_enru
    index_exact_words	= 1
    html_strip          = 1
    #    charset_table      = U+401->U+435, U+451->U+435 # заставляет не делать различия между «Е» и «Ё»zz
    min_prefix_len      = 3 #
    #    min_word_len        = 4
    #    charset_table      = U+401->U+435, U+451->U+435 # заставляет не делать различия между «Е» и «Ё»
}

source city : base
{
    sql_field_string = title
    sql_field_string = coordinate_x
    sql_field_string = coordinate_y
    sql_attr_uint = country_id
    sql_attr_uint = region_id
    sql_attr_uint = district_id
}

source select_city : city
{
    sql_query_range = select min(id), max(id) from city

    sql_query_pre = SET character_set_results = 'utf8', character_set_client = 'utf8', character_set_connection = 'utf8', character_set_database = 'utf8', character_set_server = 'utf8'

    sql_query = \
            SELECT id, title, country_id, region_id, district_id, coordinate_x, coordinate_y FROM city \
            WHERE id between $start AND $end

    sql_range_step = 10000
}

index city_rt
{
    type			= rt
    path                = /var/lib/sphinxsearch/data/city_rt
    #docinfo			= extern
    blend_chars         =-
    morphology          = stem_enru
    index_exact_words	= 1
    html_strip          = 1
    min_prefix_len      = 3 #

    # Описание всех полей для индексирования
    rt_field = title

    #Описание атрибутов
    rt_attr_string = title
    rt_attr_string = coordinate_x
    rt_attr_string = coordinate_y
    rt_attr_uint = country_id
    rt_attr_uint = region_id
    rt_attr_uint = district_id

    # Размер чанка для RT
    rt_mem_limit = 256M
}

indexer
{
        # memory limit, in bytes, kiloytes (16384K) or megabytes (256M)
        # optional, default is 128M, max is 2047M, recommended is 256M to 1024M
        mem_limit               = 256M #nss 128M
        write_buffer		    = 4M
}

#############################################################################
## searchd settings
#############################################################################

searchd
{
        # [hostname:]port[:protocol], or /unix/socket/path to listen on
        # known protocols are 'sphinx' (SphinxAPI) and 'mysql41' (SphinxQL)
        #
        # multi-value, multiple listen points are allowed
        # optional, defaults are 9312:sphinx and 9306:mysql41, as below
        #
        # listen                        = 127.0.0.1
        # listen                        = 192.168.0.1:9312
        # listen                        = 9312
        # listen                        = /var/run/searchd.sock
        listen                  = 9312
        listen                  = 9306:mysql41


        # log file, searchd run info is logged here
        # optional, default is 'searchd.log'
        log                     = /var/log/sphinxsearch/searchd.log

        # query log file, all search queries are logged here
        # optional, default is empty (do not log queries)
        query_log               = /var/log/sphinxsearch/query.log

        # client read timeout, seconds
        # optional, default is 5
        read_timeout            = 5

        # request timeout, seconds
        # optional, default is 5 minutes
        client_timeout          = 300
              # maximum amount of children to fork (concurrent searches to run)
        # optional, default is 0 (unlimited)
        # default 30
        max_children            = 300

        # maximum amount of persistent connections from this master to each agent host
        # optional, but necessary if you use agent_persistent. It is reasonable to set the value
        # as max_children, or less on the agent's hosts.
        persistent_connections_limit    = 160

        # PID file, searchd process ID file name
        # mandatory
        pid_file                = /var/run/searchd.pid # /var/run/sphinxsearch/searchd.pid

        # seamless rotate, prevents rotate stalls if precaching huge datasets
        # optional, default is 1
        seamless_rotate         = 1

        # whether to forcibly preopen all indexes on startup
        # optional, default is 1 (preopen everything)
        preopen_indexes         = 1

        # whether to unlink .old index copies on succesful rotation.
        # optional, default is 1 (do unlink)
        unlink_old              = 1

        # attribute updates periodic flush timeout, seconds
        # updates will be automatically dumped to disk this frequently
        # optional, default is 0 (disable periodic flush)
        #
        # attr_flush_period     = 900

        # max allowed network packet size
        # limits both query packets from clients, and responses from agents
        # optional, default size is 8M
        max_packet_size         = 32M #8M

        # max allowed per-query filter count
                # optional, default is 256
        max_filters             = 256

        # max allowed per-filter values count
        # optional, default is 4096
        max_filter_values       = 4096


        # socket listen queue length
        # optional, default is 5
        #
        # listen_backlog                = 5


        # per-keyword read buffer size
        # optional, default is 256K
        #
        # read_buffer           = 256K


        # unhinted read size (currently used when reading hits)
        # optional, default is 32K
        #
        # read_unhinted         = 32K


        # max allowed per-batch query count (aka multi-query count)
        # optional, default is 32
        max_batch_queries       = 64 #32


        # max common subtree document cache size, per-query
        # optional, default is 0 (disable subtree optimization)
        #
        # subtree_docs_cache    = 4M


        # max common subtree hit cache size, per-query
        # optional, default is 0 (disable subtree optimization)
        #
        # subtree_hits_cache    = 8M


        # multi-processing mode (MPM)
        # known values are none, fork, prefork, and threads
               # threads is required for RT backend to work
        # optional, default is threads
        workers                 = threads # for RT to work


        # max threads to create for searching local parts of a distributed index
        # optional, default is 0, which means disable multi-threaded searching
        # should work with all MPMs (ie. does NOT require workers=threads)
        #
        # dist_threads          = 4


        # binlog files path; use empty string to disable binlog
        # optional, default is build-time configured data directory
        #
        binlog_path           = # disable logging
        # binlog_path           = /var/lib/sphinxsearch/data # binlog.001 etc will be created there


        # binlog flush/sync mode
        # 0 means flush and sync every second
        # 1 means flush and sync every transaction
        # 2 means flush every transaction, sync every second
        # optional, default is 2
        #
        # binlog_flush          = 2


        # binlog per-file size limit
        # optional, default is 128M, 0 means no limit
        #
        # binlog_max_log_size   = 256M


        # per-thread stack size, only affects workers=threads mode
        # optional, default is 64K
        #
        # thread_stack                  = 128K


        # per-keyword expansion limit (for dict=keywords prefix searches)
        # optional, default is 0 (no limit)
        #
        # expansion_limit               = 1000

}


#############################################################################
## common settings
#############################################################################

common
{
        json_autoconv_numbers = 1
}
